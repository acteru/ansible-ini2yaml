#! /usr/bin/env python
from configparser import ConfigParser
import re
import sys
import yaml


def parse_value(value):
    if noQuotesNeededRegex.match(value):  # Integers, booleans and quoted strings strings must not be quoted
        return value.strip("'")
    return value


if __name__ == "__main__":
    inventory = {}
    parser = ConfigParser(allow_no_value=True)
    parser.optionxform = str
    config_file = open(sys.argv[1], encoding='utf-8')
    parser.read_string(config_file.read())
    varRegex = re.compile(" *([a-zA-Z][a-zA-Z0-9_]+)=('[^']+'|\"[^\"]+\"|[^ ]+)")
    noQuotesNeededRegex = re.compile("^([-.0-9a-zA-Z]+|'[^']+'|\"[^\"]+\")$")

    for section in parser.sections():
        group = section.split(':')
        if len(group) == 1:  # section contains host group
            for name, value in parser.items(section):
                if value:
                    value = name + '=' + value
                else:
                    value = name
                host = value.split(' ', 1)
                hostname = host[0]
                hostvars = host[1] if len(host) > 1 else ''
                hostvars = varRegex.findall(hostvars)
                inventory.setdefault('all', {}).setdefault('children', {}).setdefault(group[0], {}).setdefault('hosts', {})[hostname] = {}
                for hostvar in hostvars:
                    value = parse_value(hostvar[1])
                    inventory.setdefault('all', {}).setdefault('children', {}).setdefault(group[0], {}).setdefault('hosts', {})[hostname][hostvar[0]] = value
        elif group[1] == 'vars':  # section contains group vars
            for name, value in parser.items(section):
                value = parse_value(value)
                inventory.setdefault('all', {}).setdefault('children', {}).setdefault(group[0], {}).setdefault('vars', {})[name] = value
        elif group[1] == 'children':  # section contains group of groups
            for name, value in parser.items(section):
                inventory.setdefault('all', {}).setdefault('children', {}).setdefault(group[0], {}).setdefault('children', {})[name] = {}
    print(yaml.dump(inventory, default_flow_style=False, width=float("inf")))
